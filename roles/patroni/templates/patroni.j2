#jinja2: trim_blocks:True,lstrip_blocks:True
scope: {{ item.key }}
name: {{ ansible_hostname }}

restapi:
  listen: {{ ansible_default_ipv4.address }}:{{ item.value.port + 2000 }}
  connect_address: {{ ansible_default_ipv4.address }}:{{ item.value.port + 2000 }}

etcd:
  hosts: {% for host in groups['etcd_master'] %}{{ hostvars[host].ansible_default_ipv4.address }}:2379{% if not loop.last %},{% endif %}{% endfor %}

log:
  level: {{ patroni_log_level }}
  dir: {{ patroni_log_dir }}
  file_size: {{ patroni_log_file_size }}
  file_num: {{ patroni_log_file_num }}
  format: '{{ patroni_log_format }}'
  dateformat: '{{ patroni_log_dateformat }}'
  {% if patroni_log_loggers is defined %}
  loggers:
    {{ patroni_log_loggers | indent( width=4, indentfirst=false) }}{% endif %}

bootstrap:
  dcs:
    synchronous_mode: {{ patroni_bootstrap_dcs_synchronous_mode }}
    synchronous_mode_strict: {{ patroni_bootstrap_dcs_synchronous_mode_strict }}
    ttl: {{ patroni_bootstrap_dcs_ttl }}
    loop_wait: {{ patroni_bootstrap_dcs_loop_wait }}
    retry_timeout: {{ patroni_bootstrap_dcs_retry_timeout }}
    maximum_lag_on_failover: {{ patroni_bootstrap_dcs_maximum_lag_on_failover }}
    check_timeline: {{ patroni_bootstrap_dcs_check_timeline }}
    postgresql:
      use_pg_rewind: {{ patroni_use_pg_rewind }}
      logging_collector: on
      log_destination: stderr
      use_slots: {{ patroni_bootstrap_dcs_postgresql_use_slots }}
      parameters:
        log_directory: {{ postgresql_log_dir }}
        archive_mode: "{{ patroni_bootstrap_dcs_postgresql_parameters_archive_mode }}"
        archive_timeout: {{ patroni_bootstrap_dcs_postgresql_parameters_archive_timeout }}
        archive_command: /usr/bin/pgbackrest --stanza={{ item.key }} archive-push %p
      recovery_conf:
        recovery_target_timeline: {{ patroni_bootstrap_dcs_postgresql_recovery_conf_recovery_target_timeline }}
        restore_command: /usr/bin/pgbackrest --stanza={{ item.key }} archive-get %f "%p"

  pg_hba:
  {% for host in groups['database'] %}
  - host replication {{ item.value.replication_username | default('replicator') }} {{ hostvars[host].ansible_default_ipv4.address }}/32 trust
  - host all all {{ hostvars[host].ansible_default_ipv4.address }}/32 trust
  {% endfor %}
  {% for host in groups['frontal'] %}
  - host all all {{ hostvars[host].ansible_default_ipv4.address }}/32 trust
  {% endfor %}

  method: initdb
  pgbackrest:
    command: /usr/local/bin/bootstrap-pgbackrest
    keep_existing_recovery_conf: False
    recovery_conf:
      recovery_target_action: promote
      recovery_target_timeline: latest
      restore_command: /usr/bin/pgbackrest --stanza={{ item.key }} archive-get %f "%p"

  initdb:
  - encoding: UTF8
  - data-checksums

postgresql:
  listen: {{ ansible_default_ipv4.address }}:{{ item.value.port }}
  connect_address: {{ ansible_default_ipv4.address }}:{{ item.value.port }}
  data_dir: {{ item.value.path }}/{{ item.value.version | default(postgresql_version) }}/postgresql
  bin_dir: /usr/lib/postgresql/{{ item.value.version | default(postgresql_version) }}/bin
  use_pg_rewind: {{ patroni_use_pg_rewind }}
  remove_data_directory_on_diverged_timelines: {{ patroni_remove_data_directory_on_diverged_timelines }}
  logging_collector: on
  log_destination: stderr
  authentication:
    replication:
      username: {{ item.value.replication_username | default('replicator') }}

  parameters:
    log_directory: {{ postgresql_log_dir }}
    synchronous_commit: remote_write
    #synchronous_commit: local
    {% if groups['database']|length > 1 %}
    synchronous_standby_names: ANY 1 ({{ groups['database']| join(', ') }})
    {% else %}
    synchronous_standby_names: ANY 0 ({{ groups['database']| join(', ') }})
    {% endif %}

  create_replica_methods:
    - pgbackrest
    - basebackup

  pgbackrest:
    command: /usr/bin/pgbackrest --stanza={{ item.key }} --delta restore
    no_params: true
    no_master: 1
    keep_data: true
  basebackup:
    max-rate: '100M'

watchdog:
  mode: off

tags:
  nofailover: false
  noloadbalance: false
  clonefrom: false
  nosync: false
